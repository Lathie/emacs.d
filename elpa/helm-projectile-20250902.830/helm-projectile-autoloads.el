;;; helm-projectile-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))



;;; Generated autoloads from helm-projectile.el

(defvar helm-projectile-fuzzy-match t "\
Enable fuzzy matching for Helm Projectile commands.
This needs to be set before loading helm-projectile.el.")
(custom-autoload 'helm-projectile-fuzzy-match "helm-projectile" t)
(autoload 'helm-projectile-switch-project "helm-projectile" nil t)
(autoload 'helm-projectile-switch-project-other-window "helm-projectile" nil t)
(autoload 'helm-projectile-switch-project-other-frame "helm-projectile" nil t)
(autoload 'helm-projectile-find-file "helm-projectile" nil t)
(autoload 'helm-projectile-find-file-other-window "helm-projectile" nil t)
(autoload 'helm-projectile-find-file-other-frame "helm-projectile" nil t)
(autoload 'helm-projectile-find-file-in-known-projects "helm-projectile" nil t)
(autoload 'helm-projectile-find-dir "helm-projectile" nil t)
(autoload 'helm-projectile-find-dir-other-window "helm-projectile" nil t)
(autoload 'helm-projectile-find-dir-other-frame "helm-projectile" nil t)
(autoload 'helm-projectile-recentf "helm-projectile" nil t)
(autoload 'helm-projectile-switch-to-buffer "helm-projectile" nil t)
(autoload 'helm-projectile-switch-to-buffer-other-window "helm-projectile" nil t)
(autoload 'helm-projectile-switch-to-buffer-other-frame "helm-projectile" nil t)
(autoload 'helm-projectile-browse-dirty-projects "helm-projectile" nil t)
(autoload 'helm-projectile-find-file-dwim "helm-projectile" "\
Find file at point based on context." t)
(autoload 'helm-projectile-find-file-dwim-other-window "helm-projectile" "\
Find file at point based on context." t)
(autoload 'helm-projectile-find-file-dwim-other-frame "helm-projectile" "\
Find file at point based on context." t)
(autoload 'helm-projectile-find-other-file "helm-projectile" "\
Switch between files with the same name but different extensions using Helm.
With FLEX-MATCHING, match any file that contains the base name of
current file.  Other file extensions can be customized with the
variable `projectile-other-file-alist'.

(fn &optional FLEX-MATCHING)" t)
(autoload 'helm-projectile-find-other-file-other-window "helm-projectile" "\
Switch between files with the same name but different extensions using Helm.
With FLEX-MATCHING, match any file that contains the base name of
current file.  Other file extensions can be customized with the
variable `projectile-other-file-alist'.

(fn &optional FLEX-MATCHING)" t)
(autoload 'helm-projectile-find-other-file-other-frame "helm-projectile" "\
Switch between files with the same name but different extensions using Helm.
With FLEX-MATCHING, match any file that contains the base name of
current file.  Other file extensions can be customized with the
variable `projectile-other-file-alist'.

(fn &optional FLEX-MATCHING)" t)
(autoload 'helm-projectile-on "helm-projectile" "\
Turn on `helm-projectile' key bindings." t)
(autoload 'helm-projectile-off "helm-projectile" "\
Turn off `helm-projectile' key bindings." t)
(autoload 'helm-projectile-grep "helm-projectile" "\
Helm version of `projectile-grep'.
DIR is the project root, if not set then current project root is used.
FILES is a list of file patterns to search in.  When called with a
prefix argument then ask for FILES.

(fn &optional DIR FILES)" t)
(autoload 'helm-projectile-ack "helm-projectile" "\
Helm version of `projectile-ack'.
DIR directory where to search, if not set then current project root is
used.  TYPES is a list of types to include in search.  When called with
a prefix argument, then ask for TYPES.

(fn &optional DIR TYPES)" t)
(autoload 'helm-projectile-ag "helm-projectile" "\
Helm version of `projectile-ag'.
When called with a single or a triple prefix argument, ask for OPTIONS.
When called with a double or a triple prefix argument, ask for
TYPES (see `helm-grep-ag').'

This command uses `helm-grep-ag' to perform the search, so the actual
searcher used is determined by the value of `helm-grep-ag-command'.

(fn &optional OPTIONS)" t)
(autoload 'helm-projectile-rg "helm-projectile" "\
Projectile version of `helm-rg'.
When package `helm-rg' is not installed and `helm-grep-ag-command' is
pointing to ripgrep (rg) then use `helm-projectile-ag'.  Otherwise if
`helm-projectile-ask-to-install-helm-rg' is non nil then ask to install
package `helm-rg'." t)
(autoload 'helm-projectile-toggle "helm-projectile" "\
Toggle Helm version of Projectile commands.
When TOGGLE is greater than 0 turn Helm version of Projectile commands
on.  When TOGGLE is is less or equal to 0 turn Helm version of commands
off.

(fn TOGGLE)")
(autoload 'helm-projectile "helm-projectile" "\
Use projectile with Helm instead of ido.

With a prefix ARG invalidates the cache first.
If invoked outside of a project, displays a list of known projects to jump.

(fn &optional ARG)" t)
(eval-after-load 'projectile '(progn (define-key projectile-command-map (kbd "h") #'helm-projectile)))
(register-definition-prefixes "helm-projectile" '("helm-"))

;;; End of scraped data

(provide 'helm-projectile-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; helm-projectile-autoloads.el ends here
